{
    "openapi": "3.0.0",
    "info": {
      "version": "2.0",
      "title": "BLAZE INTERACTIVE API"
    },
    "servers": [
      {
        "url": "https://ttblaze.iifl.com/",
        "description": "Live Server"
      },
      {
        "url": "https://developers.symphonyfintech.in/",
        "description": "Sandbox Server"
      }
    ],
    "tags": [
      
      {
        "name": "Getting Started",
        "description": "This document describes the API specifications for communicating with an interactive gateway. API specifications are based on the rest protocol and cover transaction handling only. In the case of data feed, the separate API will be the source of information. Gateway currently provides for translation of JSON messages only.<br/><br/><br/>
        <strong><font size='4px'>Obtaining Public key for API</font></strong><br/><br/>In order to gain access to XTS trimmed interactive API services, you require a public key. To obtain a public key, you need to approach your broker’s API dashboard page listed by him and register yourself as an API user.<br/>
        On registering with the broker, you will get a verification link on the email. You need to validate your email id by clicking on the link in the verification email. You will be directed to the login page.<br/>
        On logging in to the API dashboard site, you can select trimmed interactive API subscription and provide details as required for enabling the selected API service. Then wait for the approval email from the broker’s support system<br/>
        On successful approval, you will receive an email containing the appKey and secretKey to access API services.<br/>
        Keep a copy of your API service appKey and secretKey for each registered instance and retain the same for future use. Note that only one session is possible with a single appKey and secretKey combination, do not distribute the same to others. In case you feel that your keys are compromised, you can log in to the API dashboard with your credentials emailed to you and regenerate a new key and use it in your source code or settings.<br/>
          
        <br/><br/><strong><font size='4px'>Authorization</font></strong><br/><br/>
        
        
        For any API other than login, you need to provide an authentication token in the request header to receive a response. The token is generated only after a valid user login and it's valid only for a defined period of time (12 hours), after which the token will be invalid/expired. 
        Below is the example given for the key-value pair for header requests.<br/>
        <pre>Header: Content-Type: application/json<br/>authorization: eyJ1c2VySUQiOiJSVVBFU0giLCJpYXQiOjE1NTIxMjIwOTEsImV4cCI6MTU1MjIwODQ5MX0</pre>
        <br/><br/><div style='border-left: 10px solid red;padding-left: 20px;'>NOTE<p>Default values are examples provided in response.</p></div>"
      },
      {
        "name": "Introduction",
        "description": "In order to get streaming interactive event, you need to use socket.io library. For more information you can visit : <code>https://socket.io/</code> .<br/><br/><strong><font size='4px'>Real time streaming flow</font></strong><br/>
        <p style='font-size: 12px'>Once the connection is established, real-time streaming can be obtained by listening to the socket on the relevant interactive events. You can get the related streaming data on those events.
        Below are the steps you need to follow to achieve real-time streaming of interactive events:</p><br/><ul><li>Register interactive event of socket connection.</li><li>Real-time interactive events.</li></ul>"
      },
      {
        "name": "Connect",
        "description": "User need to connect server via socket(i.e. websocket). It is important to set path parameter value as <code>/interactive?socket.io</code> during connection. Token will be only available after successful login. So make sure you login first then you can connect server via socket.
        <br/><br/>
        <pre>
        let socket = socketIoClient(url,
        {<br/>
          &nbsp; path: <span style='color:red'>'/interactive/socket.io'</span>,<br/>
          &nbsp; query: {<br/>
            &nbsp;&nbsp;  token: token,<br/>
            &nbsp;&nbsp;  userID: userID,<br/>
            &nbsp;&nbsp;  apiType: INTERACTIVE<br/>
            &nbsp;
          }<br/>
        });
        </pre>
      <p style='font-size: 12px;'>Here URL is REST API address to connect the interactive server(i.e. <a href='javascript:void(0);'>www.test.example.com</a>).
      Once connected to the server you can listen to the following events from the server. i.e. <b>connect, joined, error, order, trade, position, logout & disconnect.</b>
      One of the <b>connect</b> example events is given below.<br/></p>
      <pre>
        socket.on('connect', function () {<br/>
        &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>"
      },
      {
        "name": "Joined",
        "description":"If a successful connection happens with sever, it will raise this event to indicate a user has been connected.
        <pre>
        socket.on('joined', function (<span style='color:red'>data</span>) {<br/>
          &nbsp;console.info(\"interactive socket joined successfully!\");<br/>
        });
        </pre>"
      },
      {
        "name": "Error",
        "description":"In case of any error with sever, it will raise this event along with the error cause. i.e. While connecting you have sent the wrong token, the server will raise this event & disconnect your socket connection.
        <pre>
        socket.on('error', function (<span style='color:red'>data</span>) {<br/>
        &nbsp;console.info(\"interactive error:\" + data);</br>
        });
        </pre>"
      },
      {
        "name": "Disconnect",
        "description": "In case, socket disconnection happens with sever, it will raise this event to indicate disconnection.<br/>
        <pre>
        socket.on('disconnect', function () {<br/>
          &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>"
      },
      {
        "name": "Orders",
        "description": "To listen order state change events like, <b>New, Filled, Partial filled</b> etc, register this event.
        <pre>
        socket.on('order', function (<span style='color:red'>order</span>) {<br/>
          &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>
      <p>Below is <span style='color:red'>order</span> object you will receive when any of your order state changes.</p>
      <pre>
        {<br/>
            &nbsp;\"LoginID\": \"XTS\",<br/>
            &nbsp;\"ClientID\": \"XTSCLI\",<br/>
            &nbsp;\"AppOrderID\": 648468730,<br/>
            &nbsp;\"OrderReferenceID\": \"\",<br/>
            &nbsp;\"GeneratedBy\": \"TWSAPI\",<br/>
            &nbsp;\"ExchangeOrderID\": \"1005239196374108\",<br/>
            &nbsp;\"OrderCategoryType\": \"NORMAL\",<br/>
            &nbsp;\"ExchangeSegment\": \"NSECM\",<br/>
            &nbsp;\"ExchangeInstrumentID\": 16921,<br/>
            &nbsp;\"OrderSide\": \"BUY\",<br/>
            &nbsp;\"OrderType\": \"Limit\",<br/>
            &nbsp;\"ProductType\": \"NRML\",<br/>
            &nbsp;\"TimeInForce\": \"DAY\",<br/>
            &nbsp;\"OrderPrice\": 0,<br/>
            &nbsp;\"OrderQuantity\": 1,<br/>
            &nbsp;\"OrderStopPrice\": 0,<br/>
            &nbsp;\"OrderStatus\": \"New\",<br/>
            &nbsp;\"OrderAverageTradedPrice\": \"\",<br/>
            &nbsp;\"LeavesQuantity\": 1,<br/>
            &nbsp;\"CumulativeQuantity\": 0,<br/>
            &nbsp;\"OrderDisclosedQuantity\": 0,<br/>
            &nbsp;\"OrderGeneratedDateTime\": \"14-05-2021 11:17:29\",<br/>
            &nbsp;\"ExchangeTransactTime\": \"14-05-2021 11:17:30\",<br/>
            &nbsp;\"LastUpdateDateTime\": \"14-05-2021 11:17:29\",<br/>
            &nbsp;\"OrderExpiryDate\": \"01-01-1980 00:00:00\",<br/>
            &nbsp;\"CancelRejectReason\": \"\",<br/>
            &nbsp;\"OrderUniqueIdentifier\": \"454845\",<br/>
            &nbsp;\"OrderLegStatus\": \"SingleOrderLeg\"<br/>
            &nbsp;\"BoLegDetails\": 0<br/>
            &nbsp;\"IsSpread\": false<br/>
            &nbsp;\"BoEntryOrderId\": \"\"<br/>
            &nbsp;\"MessageCode\": 9004<br/>
            &nbsp;\"TokenID\": 0<br/>
            &nbsp;\"ApplicationType\": 0<br/>
            &nbsp;\"SequenceNumber\": 0<br/>
        }
     </pre>"
      },
      {
        "name": "Trade",
        "description": "When any order gets executed (filled, partially filled), a new trade event will be generated. The server will raise trade events & you can listen to this event by registering it.<br/>
        <pre>
        socket.on('trade', function (<span style='color:red'>trade</span>) {<br/>
          &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>
      <p>Below is <span style='color:red'>trade</span> object you will receive when any trade happens on your account.</p>
      <pre>
      {<br/>
        &nbsp;\"LoginID\": \"XTS\",<br/>
        &nbsp;\"ClientID\": \"XTSCLI\",<br/>
        &nbsp;\"AppOrderID\": 648468731,<br/>
        &nbsp;\"OrderReferenceID\": \"\",<br/>
        &nbsp;\"GeneratedBy\": \"TWSAPI\",<br/>
        &nbsp;\"ExchangeOrderID\": \"1005239196374109\",<br/>
        &nbsp;\"OrderCategoryType\": \"NORMAL\",<br/>
        &nbsp;\"ExchangeSegment\": \"NSECM\",<br/>
        &nbsp;\"ExchangeInstrumentID\": 16921,<br/>
        &nbsp;\"OrderSide\": \"BUY\",<br/>
        &nbsp;\"OrderType\": \"Limit\",<br/>
        &nbsp;\"ProductType\": \"NRML\",<br/>
        &nbsp;\"TimeInForce\": \"DAY\",<br/>
        &nbsp;\"OrderPrice\": 0,<br/>
        &nbsp;\"OrderQuantity\": 1,<br/>
        &nbsp;\"OrderStopPrice\": 0,<br/>
        &nbsp;\"OrderStatus\": \"Filled\",<br/>
        &nbsp;\"OrderAverageTradedPrice\": \"44.00\",<br/>
        &nbsp;\"LeavesQuantity\": 0,<br/>
        &nbsp;\"CumulativeQuantity\": 1,<br/>
        &nbsp;\"OrderDisclosedQuantity\": 0,<br/>
        &nbsp;\"OrderGeneratedDateTime\": \"14-05-2021 11:17:29\",<br/>
        &nbsp;\"ExchangeTransactTime\": \"14-05-2021 11:17:30\",<br/>
        &nbsp;\"LastUpdateDateTime\": \"14-05-2021 11:17:29\",<br/>
        &nbsp;\"OrderUniqueIdentifier\": \"454845\",<br/>
        &nbsp;\"OrderLegStatus\": \"SingleOrderLeg\",<br/>
        &nbsp;\"LastTradedPrice\": 44,<br/>
        &nbsp;\"LastTradedQuantity\": 1,<br/>
        &nbsp;\"LastExecutionTransactTime\": \"14-05-2021 11:17:29\",<br/>
        &nbsp;\"ExecutionID\": \"1320599196383056\",<br/>
        &nbsp;\"ExecutionReportIndex\": 3,<br/>
        &nbsp;\"IsSpread\": false,<br/>
        &nbsp;\"MessageCode\": 9005,<br/>
        &nbsp;\"MessageVersion\": 1,<br/>
        &nbsp;\"TokenID\": 0,<br/>
        &nbsp;\"ApplicationType\": 0<br/>
        &nbsp;\"SequenceNumber\": 0<br/>
        }
      </pre>"
      },
      {
        "name": "Position",
        "description": "<p>If any position change happens on your account. The server will raise this event to indicate that position. By registering for this event you can track position changes.</p>
        <pre>
        socket.on('position', function (<span style='color:red'>position</span>) {<br/>
          &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>
      <p>Below is <span style='color:red'>position</span> object that you will receive when any position change happens on your account.</p>
      <pre>
      {<br/>
        &nbsp;\"AccountID\": \"SYMP1\",<br/>
        &nbsp;\"TradingSymbol\": \"ACC\",<br/>
        &nbsp;\"ExchangeSegment\": \"NSECM\",<br/>
        &nbsp;\"ExchangeInstrumentID\": \"22\",<br/>
        &nbsp;\"ProductType\": \"CNC\",<br/>
        &nbsp;\"Marketlot\": \"1\",<br/>
        &nbsp;\"Multiplier\": \"1\",<br/>
        &nbsp;\"BuyAveragePrice\": \"41.78\",<br/>
        &nbsp;\"SellAveragePrice\": \"41.63\",<br/>
        &nbsp;\"OpenBuyQuantity\": 40,<br/>
        &nbsp;\"OpenSellQuantity\": 0,<br/>
        &nbsp;\"Quantity\": 40,<br/>
        &nbsp;\"BuyAmount\": \"1671.00\",<br/>
        &nbsp;\"SellAmount\": \"2498.00\",<br/>
        &nbsp;\"NetAmount\": \"827.00\",<br/>
        &nbsp;\"UnrealizedMTM\": \"0.00\",<br/>
        &nbsp;\"RealizedMTM\": \"0.00\",<br/>
        &nbsp;\"MTM\": \"0.00\",<br/>
        &nbsp;\"BEP\": \"0.00\",<br/>
        &nbsp;\"SumOfTradedQuantityAndPriceBuy\": \"1671.00\",<br/>
        &nbsp;\"SumOfTradedQuantityAndPriceSell\": \"2498.00\",<br/>
        &nbsp;\"MessageCode\": \"9002\"<br/>
        &nbsp;\"MessageVersion\": \"1\"<br/>
        &nbsp;\"TokenID\": \"0\"<br/>
        &nbsp;\"ApplicationType\": \"0\"<br/>
        &nbsp;\"SequenceNumber\": \"0\"<br/>
        }
      </pre>"      
      },
        {
        "name": "Trade conversion",
        "description": "<p>If any trade conversion happens on your account. The server will raise this event to indicate that trade conversation status. By registering for this event you can track trade convert status.</p>
        <pre>
        socket.on('tradeConversion', function (<span style='color:red'>tradeConversion</span>) {<br/>
          &nbsp;  console.info(\"interactive socket connected successfully!\");<br/>
        });
      </pre>
      <p>Below is <span style='color:red'>tradeConversion</span> object that you will receive when any tradeConversion change happens on your account.</p>
      <pre>
      {<br/>
        &nbsp;\"LoginID\": \"ANDY1\",<br/>
        &nbsp;\"ClientID\": \"ANDY1\",<br/>
        &nbsp;\"UniqueKey\": \"ANDY1:Client:ANDY1:NRML:NONE:NSECM:881\",<br/>
        &nbsp;\"Success\": false,<br/>
        &nbsp;\"ErrorMessage\": \"Check Holdings] Required Holding:[10] Total Holding:[0]  for entity [Client]-[ANDY1] across [ALL|ALL|ALL]\",<br/>
        &nbsp;\"OriginalProduct\": \"NRML\",<br/>
        &nbsp;\"TargetProduct\": \"CNC\",<br/>
        &nbsp;\"OriginalQty\":10,<br/>
        &nbsp;\"TargetQty\": 10,<br/>
        &nbsp;\"EntityType\": \"Client\",<br/>
        &nbsp;\"ExchangeSegment\": \"NSECM\",<br/>
        &nbsp;\"ExchangeInstrumentId\": 40,<br/>
        &nbsp;\"TargetEntityId\": \"ANDY1\",<br/>
        &nbsp;\"NetValue\": 50558.000000000015,<br/>
        &nbsp;\"Status\": \"ModificationRejected\",<br/>
        &nbsp;\"RejectionReason\": \"[Check Holdings] Required Holding:[10] Total Holding:[0]  for entity [Client]-[ANDY1] across [ALL|ALL|ALL]\",<br/>
        &nbsp;\"RejectedBy\": \"OEMS\",<br/>
        &nbsp;\"Price\": 50558.000000000015,<br/>
        &nbsp;\"NOWTimeStamp\": \"2020-12-17T16:47:12.0369966\",<br/>
        &nbsp;\"OrderSide\": \"Sell\",<br/>
        &nbsp;\"IsProOrder\": false,<br/>
        &nbsp;\"MessageCode\": \"9002\"<br/>
        &nbsp;\"MessageVersion\": \"1\"<br/>
        &nbsp;\"TokenID\": \"0\"<br/>
        &nbsp;\"ApplicationType\": \"0\"<br/>
        &nbsp;\"SequenceNumber\": \"180248277233929\"<br/>
        }
      </pre>"      
      },
      {
        "name": "Logout",
        "description": "When your session is logged out by the server, it will raise this event. By registering for this event you can track your session state.<br/>
        <pre>
        socket.on('logout', function () {<br/>
          &nbsp;  console.info(\"interactive socket logged out!\");<br/>
        });
      </pre>
      <p><b>Note:</b> Here you will not get any data object from server. This event it self notify that session has been closed by server.</p>"      
      },
      {
        "name": "FAQ",
        "description": "<b> Q1. Do we need to re login every day? </b><br/>
        Yes, you need to log in every day, every time you start the application XTS API maintains session
  token for 24 hours OR until logout is called whichever is earlier. </br></br>
  
      <b>Q2. There would be unique token for each login?</b><br/>
  Yes, there will be a unique session token.   </br></br>
        
      <b>Q3. What are tokens? </b><br>
  The token is generated only after a valid user login and it's valid only for a defined period of time, after which the token will be invalid/expired. For any API other than login, you need to provide an authentication token in the request header to receive a response.    </br></br>
  
      <b>Q4. Can I use along with my Android App?</b><br>
  Yes, we can use API along with Android App. </br></br>
      
      <b>Q5. How can I fetch data on my application using token given to my client?</b><br>
  By creating a post back request using token received by client.</br></br>
  
      <b>Q6. Does this API support Multi client execution through a single login?</b><br>
  Yes, it will support Multi client account mapped to a dealer, only dealer can exercise Multi
  client using single login. </br></br>
  
  
      <b>Q7. can Bracket order and Cover order be placed using API?</b><br>
  No, we cannot place bracket and cover order using API.</br></br>
  
      <b>Q8. Does API support Trailing SL?</b><br>
  No, this API does not support Trailing SL.</br></br>
  
  
      <b>Q9. Do I need to login to XTS if logged in to API?</b><br>
  Both login sessions are maintained separately. So, if you logged in to API you can log in to XTS if you want, but it is not mandatory.</br></br>
  
      <b>Q10. Will my XTS and API login credentials differ?</b><br>
  You may use same login credentials, but secret keys for API can be provided.</br></br>
  
      <b>Q11. After how many days will API password be required to reset?</b><br>
  You can reset API password any time, default reset will require after one month.</br></br>
  
      <b>Q12. Do we need to take Market Data from XTS server at IIFL only or i can use the same of any
  other 3rd party services provider?</b><br>
  Yes, you can take it from any third-party authorized vendor also. </br></br>
  
      <b>Q13. What is Github link for Python and Java sdk?</b><br>
  https://github.com/symphonyfintech </br></br>
  
      <b>Q14. What order functions does the API support?</b><br>
  1. Place Order</br>
  2. Modify Order</br>
  3. Cancel Order</br>
  4. CancelAll Order</br>
  5. Order Book</br>
  6. Trade Book</br>
  7. Order History</br></br>
  
      <b>Q15. what are order types does the API support?</b><br>
  1. Market Order</br>
  2. Limit Order</br>
  3. Stop Limit Order</br>
  4. Stop Market Order</br></br>
  
  
      <b>Q16. If the internet goes down, do I need to relogin or will it reconnect by itself once connectivity
  is back?</b><br>
  Yes, you need to re-login, as if the internet goes down you will get logout.</br></br>
  
      <b>Q17. Can we convert product type from MIS to NRML and vice versa (I.e. Delivery marking)</b><br>
  Yes, we can convert.</br></br>
  
      <b>Q18. Can Market data be used for any application or only on XTS REST API?</b><br>
  No, Market data can be use only on XTS REST API </br></br>
  
      <b>Q19. What is BLAZE Trading API?</b><br>
  Trading APIs allows to integrate your own trading system with BLAZE Trading Platform for placing orders and other account information.</br></br>
  
      <b>Q20. What is BLAZE Market Data API?</b><br>
  Market Data API is a mixed HTTP REST and HTTP streaming Protocol contract. It provides access to live quotes data on a wide range of symbols, Exchange and segments.</br></br>
  
      
  
      <b>Q21. Can I write trading strategy using BLAZE APIs?</b><br>
  You need domain knowledge, skilled resources, technology & infrastructure in the form of hardware and the right trading platform, and compatible APIs for starting with Strategy based trading using BLAZE API.</br></br>
  
      <b>Q22. what are the hardware and infrastructure requirements to start using BLAZE APIs?</b><br>
  To start using BLAZE APIs one needs a sufficiently well performing Laptop or desktop with quad core CPU and 8 GB RAM, e.g. Intel i3 processor etc. You would also need a stable internet connection with minimum of 1 Mbps speed at least for limited number of symbols.</br></br>
  
      <b>Q23. What are the operating system requirements to use BLAZE Frontend API?</b><br>
  You can use Ubuntu 16.04, RHEL 7.5, other Debian, Fedora versions with Python 3.7 for Python APIs, NodeJS. You may use Windows 7 Ultimate and later for C# APIs.</br></br>
  
      <b>Q24. I am getting invalid Credentials!!?</b><br>
  You are either providing incorrect USER ID or password or Interactive Key assigned to you.</br></br>
      
      <b>Q25. I am facing invalid session or unrecognized token/system or session not found?</b><br>
  This is because you are not sending the valid token you have received in the login response in all subsequent message headers. You can call logout or force disconnect application and re-login to fetch valid token and monitor its usage by adding sufficient logs.</br></br>
      
      <b>Q26. What does NRML, MIS and CNC product type?</b><br>
  NRML - Normal, it means you can carry forward positions.<br>
  MIS - stands for Margin Intraday Square Off, user needs to square off compulsorily before end of trading session.<br>
  CNC - stands for Cash and Carry, it is used for trading in equities and tangible instruments/asset class.</br></br>
      
      
      <b>Q27. what is the difference between Day wise position and Net wise Position?</b><br>
  Day wise position shows open positions of instruments one has traded during the current trading session, the Net wise position shows all open positions one has accumulated in futures/options across trading days until the expiry of contracts.</br></br>
      
      <b>Q28. I am getting User data not found?</b><br>
  You are either providing invalid USER ID or Marketdata Key.</br></br>
  
      <b>Q29. I am getting invalid Credentials!!?</b><br>
  You are either providing invalid USER ID or password.</br></br>
      
      <b>Q30. My subscription limit is 50 but none of the symbol I send in a list of 100 got subscribed, what could be the reason?</b><br>
  Our server validates your limits before subscribing therefore when you send a list of instruments that exceed the limit, your request does not reach the data server and hence no feed or response.</br></br>
  
      <b>Q31. Do I need to always subscribe to list of symbols?</b><br>
  You always need to send a list of instruments to subscribe to, but that list can have only one instrument and you can subscribe single instrument until you exhaust your subscription limit.</br></br>
      
      <b>Q32. Where do I find the Master List of all instruments?</b><br>
  You can get master list by sending POST JSON request to http://ip:port/marketdata/instruments/master, with the body containing an array of segments. E.g.{[NSECM,NSEFO]}. </br></br>
      
      <b>Q33. How do I parse Equity instruments from Master data response?</b><br>
  Each pipe separated line in response starting with NSECM should be tokenized according to the given header ExchangeSegment|ExchangeInstrumentID|InstrumentType|Name|Description|Series|NameWi thSeries|InstrumentID|PriceBand.High|PriceBand.Low|FreezeQty|TickSize|LotSize.</br></br>
      
      <b>Q34. How do I parse FO instruments from Master data response?</b><br>
  Each pipe separated line in response starting with NSEFO should be tokenized according to the given header ExchangeSegment|ExchangeInstrumentID|InstrumentType|Name|Description|Series|NameWi thSeries|InstrumentID|PriceBand.High|PriceBand.Low|FreezeQty|TickSize|LotSize|UnderlyingI nstrumentId|UnderlyingIndexName|ContractExpiration|StrikePrice|OptionType.</br></br>
      
      <b>Q35. BLAZE API Documentations Test Environment Links </b><br>
   Interactive API Document:</br>
  https://ttblaze.iifl.com/doc/interactive/ </br>
   Market Data API Document: </br>
  https://ttblaze.iifl.com/doc/marketdata/  </br></br>
  
  <b>Q36. what are the technical skills required to use BLAZE APIs?</b><br>
  Any person with trading domain knowledge along with quant knowledge or data analysis skill can start using API in SDK format with a little bit of scripting knowledge in Python, JavaScript (NodeJS). And persons with advanced skills in C# or Java can write fairly complex systems and Front-ends using BLAZE APIs.</br></br>
   
        "      
      },
      {
        "name": "User",
        "description": "The user needs to log in using the public key and secret key which are generated while registering with the API dashboard. The public key will be first authenticated by the broker’s gateway before redirecting to the API service."
      },
      {
        "name": "Order",
        "description": "XTS trimmed interactive API calls grouped under orders enable users to fetch traded orders, get open orders, place orders to exchange, modify the open orders, cancel open orders and place an order with stop-loss cover. The following sections will elaborate on each request and response."
      },
      {
        "name": "Portfolio",
        "description": "A user's portfolio consists of long-term equity holdings and short-term positions. The portfolio APIs return instruments in a portfolio with up-to-date profit and loss computations.\n"
      },
      {
        "name": "Status",
        "description": "Exchange Status indicates the availability of eligible exchanges for Normal trading. It enables users to know whether to send an order or not.\n"
      },
      {
        "name": "Message",
        "description": "Exchange sends various messages regarding bans, circuit limits, news about listed companies, etc to connected Brokers, user can access these messages relevant to a user using this API.\n"
      }
    ],
    "x-tagGroups": [
      {
        "name": "Introduction",
        "tags": [
          "Change History",
          "Index",
          "Getting Started"
        ]
      },
      {
        "name": "API",
        "tags": [
          "User",
          "Order",
          "Portfolio",
          "Status",
          "Message"
        ]
      },
      {
        "name": "SocketIO Streaming",
        "tags": [
          "Introduction",
          "Connect",
          "Joined",
          "Error",
          "Disconnect",
          "Orders",
          "Trade",
          "Position",
          "Trade conversion",
          "Logout"
        ]
      },
      {
        "name": "Help",
        "tags": [
          "FAQ"
        ]
      }
    ],
  
    "paths": {
      
      "/interactive/user/session": {
        "post": {
          "tags": [
            "User"
          ],
          "summary": "Session Login",
          "description": "The API consumer sends a login request to the Interactive API server with secretKey and appKey. Upon successful validation, the user will get a login response. <br/>Once the request_token is obtained from the login flow, it should be POSTed to <a href='javascript:void(0);'>http://IP:Port/instancename/user/session</a> to complete the token exchange and retrieve the access_token.
          <br/><br/>
          Extract the token to be used in subsequent request Headers. Also, note some of the ENUMS/String highlighted<br/> 
          <strong><ul>
          <li>token</li></strong>
          <li><strong>orderSource</strong><ul><li>WebAPI</li><li>MobileAndroidAPI</li><li>MobileWindowsAPI</li><li>MobileIOSAPI</li><li>TWSAPI</li></ul></li>
          <li><strong>socketEvent</strong><ul><li>joined</li><li>error</li><li>warning</li><li>success</li><li>order</li><li>trade</li><li>logout</li><li>position</li></ul></li>
          <li><strong>orderSide</strong><ul><li>BUY</li><li>SELL</li></ul></li>
          <li><strong>positionSqureOffMode</strong><ul><li>DayWise</li><li>NetWise</li></ul></li>
          <li><strong>positionSquareOffQuantityType</strong><ul><li>Percentage</li><li>ExactQty</li></ul></li>
          <li><strong>dayOrNet</strong><ul><li>DAY</li><li>DAY</li>NET</ul></li>
          <li><strong>productType</strong><ul><li>CO</li><li>CNC</li><li>MIS</li><li>NRML</li></ul></li>
          <li><strong>orderType</strong><ul><li>StopLimit</li><li>StopMarket</li><li>Limit</li><li>Market</li></ul></li>
          <li><strong>timeInForce</strong><ul><li>DAY</li><li>IOC</li></ul></li>
          </ul><br/>to be saved as variables and these can be used in the subsequent request message bodies.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SessionLoginBody"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User was logged in successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserLogin"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestLogin"
            }
          }
        },
        "delete": {
          "tags": [
            "User"
          ],
          "summary": " Session Logout",
          "description": "This call invalidates the session token and destroys the API session. After this, the user should go through the login flow again and extract the session token from the login response before further activities. This does not log the user out of the XTS TWS application.",
          "responses": {
            "200": {
              "description": "successfully logout",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserLogout"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      
      "/interactive/user/profile?clientID=SYMP": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Profile",
          "description": "Using session token, the user can access his profile stored with the broker, it's possible to retrieve it at any point of time with the <a href='javascript:void(0);'>http: //ip:port/interactive/user/profile</a> API.",   "parameters": [
            {
              "name": "ClientID",
              "in": "path",
              "description": "In case you are a Dealer(i.e isInversterClient=false), API needs ClientID in a path for a profile to get processed for a particular user.",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User profile",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserProfile"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/user/balance?clientID=SYMP": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Balance",
          "description": "API calls <a href='javascript:void(0);'>http://IP:Port/instancename/user/balance</a> grouped under this category information related to limits on equities, derivatives, upfront margin, available exposure, and other RMS-related balances available to the user.",
          "parameters": [
            {
              "name": "ClientID",
              "in": "path",
              "description": "",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserBalance"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/orders": {
        "post": {
          "tags": [
            "Order"
          ],
          "summary": "Place Order",
          "description": "Read all ENUMS in response and token from Login response and provide required details as per Place Order structure and add token in JSON Header as shown in the code snippet. Place order request is an asynchronous call, the user is given an apporderID , the same can be used to query Order book (get Order) to confirm execution.<br/>
          Execution of an order is dependent on several factors like RMS Limits, risk checks, and so on.<br/>
          Orders with Limit type may remain open for an entire course of a trading day.",
        
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PlaceOrderBody"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Request sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PlaceOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        },
        
        
        "put": {
          "tags": [
            "Order"
          ],
          "parameters": [
            {
              "name": "ClientID",
              "in": "path",
              "description": "In case you are Dealer(i.e isInversterClient=false), API needs ClientID in request body for ModifyOrder to get processed for particular user.",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ModifyOrderBody"
                    }
                  ]
                }
              }
            },
            "description": "",
            "required": true
          },
          "summary": "Modify Order",
          "description": "XTS provides the facility to modify your open orders by allowing you to change the limit order to market or vice versa, change the Price or Quantity of the limit open order, change the disclosed quantity, or stop-loss of any open stop-loss order.",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PlaceOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/orders?appOrderID=11111": {
        "delete": {
          "tags": [
            "Order"
          ],
          "summary": "Cancel Order",
          "description": "This API can be called to cancel any open order of the user by providing the correct appOrderID matching with the chosen open order to cancel.",
          "parameters": [
            {
              "name": "appOrderID",
              "in": "path",
              "description": "It is system generated unique order number ",
              "required": true,
              "schema": {
                "type": "integer",
                "default": 648468731
              }
            },
            {
              "name": "orderUniqueIdentifier",
              "type": "integer",
              "in": "path",
              "description": "It is user specific Order Unique Identifier",
              "required": false,
              "schema": {
                "type": "string",
                "default": "123abc"
              }
            },
            {
              "name": "ClientID",
              "in": "path",
              "description": "In case you are Dealer(i.e isInversterClient=false), API needs ClientID in path for CancelOrder to get processed for particular user.",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP1"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CancelOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      
      "/interactive/orders/cancelall": {
        "post": {
          "tags": [
            "Order"
          ],
          "summary": "CancelAll Order",
          "description": "This API can be called for a particular segment to either cancel all open orders of the user by passing zero (0) in ExchangeInstrumentId in a request or can cancel all open orders of a particular instrumentID by passing ExchangeinstrumentID (3045) in a request.
          <br/><br/>For eg:<br/>
          If you pass <strong>ExchangeSegment: NSECM</strong> and <strong>ExchangeInstrumentID: 0</strong>. It will cancel all open orders for NSECM for that user.<br/>
          If you pass <strong>ExchangeSegment: NSECM</strong> and <strong>ExchangeInstrumentID: 3045</strong>. It will cancel all open orders for NSECM SBIN (3045) for that user.",
        
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CancelAllOrderBody"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Request sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CancelAllOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      
      "//interactive/orders": {
        "get": {
          "tags": [
            "Order"
          ],
          "parameters": [
            {
              "name": "ClientID",
              "in": "path",
              "description": "In case of dealerClient, API needs ClientID in path for OrderBook request to get processed. ",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "summary": "Order Book",
          "description": "The Order book consists of states of all the orders placed by a user. The states of the orders can be as follows:<br/>
          <ul><li>PendingNew</li><li>Open or New</li><li>PartiallyFilled</li><li>Filled</li><li>PendingReplace</li><li>Replaced</li><li>Cancelled</li><li>Rejected</li>
          </ul><br/>",
          "responses": {
            "200": {
              "description": "order book",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/orders?appOrderID=344566": {
        "get": {
          "tags": [
            "Order"
          ],
          "parameters": [
            {
              "name": "App Order ID",
              "in": "path",
              "description": "It is system generated unique order number ",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "summary": "Order History",
          "description": "Order history will provide a particular order trail chain. This indicates the particular order & its state changes. i.e.Pending New to New, New to PartiallyFilled, PartiallyFilled, PartiallyFilled & PartiallyFilled to Filled, etc",
          "responses": {
            "200": {
              "description": "order history",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderHistory"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/orders/trades": {
        "get": {
          "tags": [
            "Order"
          ],
          "parameters": [
            {
              "name": "ClientID",
              "in": "path",
              "description": "In case of dealerClient, API needs ClientID in path for TradeBook request to get processed. ",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "summary": "Trade Book",
          "description": "The trade book returns a list of all trades executed on a particular day, that was placed by the user. The trade book will display all filled and partially filled orders.",
          "responses": {
            "200": {
              "description": "Success trade book",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTradedOrder"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/portfolio/holdings?clientID=SYMP1": {
        "get": {
          "tags": [
            "Portfolio"
          ],
          "summary": "Holding",
          "description": "Holdings API calls enable users to check their long-term holdings with the broker. You need to send authorization or token with the request.",
          "parameters": [
            {
              "name": "clientID",
              "in": "path",
              "description": "ClientId of client to get holdings.",
              "required": true,
              
              "schema": {
                "type": "string",
                "default": "SYMP1"
                
              }
              
            }
          ],
          "responses": {
            "200": {
              "description": "Holding result",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PortfolioHolding"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/portfolio/positions?dayOrNet=DayWise": {
        "get": {
          "tags": [
            "Portfolio"
          ],
          "summary": "Position",
          "description": "The user's portfolio consists of short-term open positions in derivatives (futures and options contracts) and intraday equities. The positions in a portfolio remain open until they're sold, or until expiry. Derivative Contracts usually expire in a monthly sliding window or weekly sliding window of 3 periods called current, near, and far. Long Equity positions are move to the holding's portfolio after settlement day.<br/>
          The positions API returns two sets of positions, net and day. net is the actual, current net position portfolio, while the day is a snapshot of the buying and selling activity for that particular day. <br/>
  This is useful for computing intraday profits and losses for trading strategies.",
          "parameters": [
            {
              "name": "dayOrNet",
              "in": "path",
              "description": "PossibleValues: DayWise, NetWise, None",
              "required": true,
              
              "schema": {
                "type": "string",
                "default": "DayWise"
                
              }
              
            }
          ],
          "responses": {
            "200": {
              "description": "Success position",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PortfolioPosition"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/portfolio/positions/convert": {
        "put": {
          "tags": [
            "Portfolio"
          ],
          "summary": "Position Convert",
          "description": "Convert position API, enable users to convert their open positions from NRML intraday to Short term MIS or vice versa,
          provided that there is sufficient margin or funds in the account to effect such conversion.",
         
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PositionConvertBody"
                    }
                  ]
                }
              }
            },
            "description": "",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PositionConvert"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      
      
      "/interactive/status/exchange?userID=SYMP": {
        "get": {
          "tags": [
            "Status"
          ],
          "summary": "Exchange Status",
          "description": "Exchange Status indicates the availability of eligible exchanges for Normal trading. It enables user to know whether to send order or not.",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "description": "Send the user ID that check assgin segment to user get the exchange status ",
              "required": false,
              "schema": {
                "type": "string",
                "default": "SYMP"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExchangeStatus"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      },
      "/interactive/messages/exchange?exchangeSegment=NSECM": {
        "get": {
          "tags": [
            "Message"
          ],
          "summary": "Exchange Message",
          "description": "Exchange sends various messages regarding bans, circuit limits, news about listed companies, etc to connected Brokers, user can access these messages relevant to a user using this API.",
          "parameters": [
            {
              "name": "exchangeSegment",
              "in": "path",
              "description": "exchange segment i.e. NSECM,NSEFO,NSECD",
              "required": false,
              "schema": {
                "type": "string",
                "default": "NSECM"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Request sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExchangeMessage"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "ExchangeMessage": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Exchange message",
              "required": true,
              "type": "string",
              "default": "Success exchange message"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/parameters/exchangeMessage"
              }
            }
          }
        },
        "ExchangeStatus": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Exchange status",
              "required": true,
              "type": "string",
              "default": "Success exchange status"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/parameters/marketStatus"
              }
            }
          }
        },
        "ExitCoverOrderBody": {
          "required": [
            "appOrderID"
          ],
          "properties": {
            "appOrderID": {
              "name": "App Order ID",
              "in": "query",
              "description": "It is system generated unique order number ",
              "required": true,
              "type": "integer",
              "default": 3727296468
            },
          }
        },
        "SquareOffBody": {
          "required": [
            "exchangeSegment",
            "exchangeInstrumentID",
            "productType",
            "squreoffMode",
            "positionSquareOffQuantityType",
            "squareOffQtyValue",
            "blockOrderSending",
            "cancelOrders"
          ],
          "properties": {
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            },
            "productType": {
              "$ref": "#/components/parameters/productType"
            },
            "squreoffMode": {
              "$ref": "#/components/parameters/squreoffMode"
            },
            "positionSquareOffQuantityType": {
              "$ref": "#/components/parameters/positionSquareOffQuantityType"
            },
            "squareOffQtyValue": {
              "$ref": "#/components/parameters/squareOffQtyValue"
            },
            "blockOrderSending": {
              "$ref": "#/components/parameters/blockOrderSending"
            },
            "cancelOrders": {
              "$ref": "#/components/parameters/cancelOrders"
            }
  
          }
        },
        "SquareOffAllBody": {
          "required": [
            "squareOffMode"
          ],
          "properties": {
            "squreoffMode": {
              "$ref": "#/components/parameters/squreoffMode"
            }
          }
        },
        "PositionConvertBody": {
          "required": [
            "exchangeSegment",
            "exchangeInstrumentID",
            "oldProductType",
            "newProductType",
            "isDayWise",
            "targetQty",
            "statisticsLevel",
            "isInterOpPosition"
          ],
          "properties": {
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            },
            "oldProductType": {
              "name": "Old Product Type",
              "$ref": "#/components/parameters/productType"
            },
            "newProductType": {
              "name": "New Product Type",
              "type": "string",
              "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
             "default": "MIS"
            },
            "isDayWise": {
              "$ref": "#/components/parameters/isDayWise"
            },
            "targetQty": {
              "$ref": "#/components/parameters/targetQty"
            },
            "statisticsLevel": {
              "name": "New Product Type",
              "type": "string",
              "description": "",
             "default": "ParentLevel"
            },
            "isInterOpPosition": {
              "$ref": "#/components/parameters/isInterOpPosition"
            },
          }
        },
        "PlaceCoverOrderBody": {
          "required": [
            "exchangeSegment",
            "exchangeInstrumentID",
            "orderSide",
            "orderQuantity",
            "disclosedQuantity",
            "limitPrice",
            "stopPrice",
            "orderType",
          "orderUniqueIdentifier",
          "clientID"
          ],
          "properties": {
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            },
            "orderSide": {
              "$ref": "#/components/parameters/orderSide"
            },
            "orderQuantity": {
              "$ref": "#/components/parameters/orderQuantity"
            },
            "disclosedQuantity": {
              "$ref": "#/components/parameters/disclosedQuantity"
            },
            "limitPrice": {
              "$ref": "#/components/parameters/limitPrice"
            },
            "stopPrice": {
              "name": "stopPrice",
              "in": "query",
              "description": "A stop price is a price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
                a market sell order is triggered when the market price reaches or falls below the stop price.",
              "required": true,
              "type": "double",
              "default": 251.50
            },
             "orderType": {
              "$ref": "#/components/parameters/orderType"
            },
            "orderUniqueIdentifier": {
              "$ref": "#/components/parameters/orderUniqueIdentifier"
            },
             "clientID": {
              "$ref": "#/components/parameters/clientID"
            }
          }
        },
        "PlaceOrderBody": {
          "required": [
            "exchangeSegment",
            "exchangeInstrumentID",
            "productType",
            "orderType",
            "orderSide",
            "timeInForce",
            "disclosedQuantity",
            "orderQuantity",
            "limitPrice",
            "stopPrice"
          ],
          "properties": {
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            },
            "productType": {
              "name": "Product Type",
              "$ref": "#/components/parameters/productType"
            },
            "orderType": {
              "name": "Order Type",
              "$ref": "#/components/parameters/orderType"
            },
            "orderSide": {
              "$ref": "#/components/parameters/orderSide"
            },
            "timeInForce": {
              "name": "Time In Force",
              "$ref": "#/components/parameters/timeInForce"
            },
            "disclosedQuantity": {
              "$ref": "#/components/parameters/disclosedQuantity"
            },
            "orderQuantity": {
              "$ref": "#/components/parameters/orderQuantity"
            },
            "limitPrice": {
              "$ref": "#/components/parameters/limitPrice"
            },
            "stopPrice": {
              "$ref": "#/components/parameters/stopPrice"
            },
            "orderUniqueIdentifier": {
              "$ref": "#/components/parameters/orderUniqueIdentifier"
            }
          }
        },
        
        "CancelAllOrderBody": {
          "required": [
            "exchangeSegment",
            "exchangeInstrumentID"
          ],
          "properties": {
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            }
          }
        },
        
         "BracketOrderBody": {
          "required": [
           "clientID",
            "exchangeSegment",
            "exchangeInstrumentID",
            "orderType",
            "orderSide",
            "disclosedQuantity",
            "orderQuantity",
            "limitPrice",
            "stopLossPrice",
            "squarOff",
            "trailingStoploss",
             "orderUniqueIdentifier"
          ],
          "properties": {
           "clientID": {
              "$ref": "#/components/parameters/clientID"
            },
            "exchangeSegment": {
              "$ref": "#/components/parameters/exchangeSegment"
            },
            "exchangeInstrumentID": {
              "$ref": "#/components/parameters/exchangeInstrumentID"
            },
           
            "orderType": {
              "name": "Order Type",
              "$ref": "#/components/parameters/orderType"
            },
            "orderSide": {
              "$ref": "#/components/parameters/orderSide"
            },
          
            "disclosedQuantity": {
              "$ref": "#/components/parameters/disclosedQuantity"
            },
            "orderQuantity": {
              "$ref": "#/components/parameters/orderQuantity"
            },
            "limitPrice": {
              "$ref": "#/components/parameters/limitPrice"
            },
            "stopLossPrice": {
              "$ref": "#/components/parameters/stopLossPrice"
            },
            "squarOff": {
              "$ref": "#/components/parameters/squarOff"
            },
             "trailingStoploss": {
              "$ref": "#/components/parameters/trailingStoploss"
            },
            "orderUniqueIdentifier": {
              "$ref": "#/components/parameters/orderUniqueIdentifier"
            }
          }
        },
        
        
        "ModifyBracketOrderBody": {
          "required": [
            "appOrderID",
            "limitPrice",
            "stopLossPrice",
            "orderQuantity"
           
          ],
          "properties": {
            "appOrderID": {
              "$ref": "#/components/parameters/appOrderID"
            },
            "orderQuantity": {
              "$ref": "#/components/parameters/orderQuantity"
            },
            
            "limitPrice": {
              "$ref": "#/components/parameters/limitPrice"
            },
            "stopLossPrice": {
              "$ref": "#/components/parameters/stopLossPrice"
            }
           
          }
        },
        
        "ModifyOrderBody": {
          "required": [
            "appOrderID",
            "modifiedProductType",
            "modifiedOrderType",
            "modifiedOrderQuantity",
            "modifiedDisclosedQuantity",
            "modifiedLimitPrice",
            "modifiedStopPrice",
            "modifiedTimeInForce"
          ],
          "properties": {
            "appOrderID": {
              "$ref": "#/components/parameters/appOrderID"
            },
            "modifiedProductType": {
              "name": "Product Type",
              "$ref": "#/components/parameters/modifiedProductType"
            },
            "modifiedOrderType": {
              "name": "Order Type",
              "$ref": "#/components/parameters/modifiedOrderType"
            },
            "modifiedOrderQuantity": {
              "$ref": "#/components/parameters/modifiedOrderQuantity"
            },
            "modifiedDisclosedQuantity": {
              "$ref": "#/components/parameters/modifiedDisclosedQuantity"
            },
            "modifiedLimitPrice": {
              "$ref": "#/components/parameters/modifiedLimitPrice"
            },
            "modifiedStopPrice": {
              "$ref": "#/components/parameters/modifiedStopPrice"
            },
            "modifiedTimeInForce": {
              "name": "Time In Force",
              "$ref": "#/components/parameters/modifiedTimeInForce"
            },
            "orderUniqueIdentifier": {
              "$ref": "#/components/parameters/orderUniqueIdentifier"
            }
          }
        },
        "SessionLoginBody": {
          "required": [
            "secretKey",
            "appKey",
            "source"
          ],
          "properties": {
            "secretKey": {
              "$ref": "#/components/parameters/secretKey"
            },
            "appKey": {
              "$ref": "#/components/parameters/appKey"
            },
            "source": {
              "$ref": "#/components/parameters/source"
            }
          }
        },
        "HostLookUpLogin": {
          "required": [
            "AccessPassword"
          ],
          "properties": {
            "AccessPassword": {
              "$ref": "#/components/parameters/AccessPassword"
            }
          }
        },
        "SquareOff": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Request Sent",
              "required": true,
              "type": "string",
              "default": "Request sent"
            }
          }
        },
        "SquareOffAll": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Request Sent",
              "required": true,
              "type": "string",
              "default": "Request sent"
            }
          }
        },
        "PositionConvert": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "success position convert",
              "type": "string",
              "required": true,
              "default": "success position convert"
            }
          }
        },
        "PortfolioPosition": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code-GetPosition"
            },
            "description": {
              "description": "Success position",
              "type": "string",
              "required": true,
              "default": "Success position"
            },
            "result":{
             "description": "positionList",
              "type" : "array",
             "items" :{
              "$ref": "#/components/schemas/PostionResult"
              }
            }
          }
        },
        "CancelOrder": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Request Sent",
              "type": "string",
              "required": true,
              "default": "Request sent"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/schemas/CancelOrderResult"
              }
            }
          }
        },
        "CancelOrderResult": {
          "type": "object",
          "required": [],
          "properties": {
            "AppOrderID": {
              "type": "integer",
              "description": "User AppOrder ID ",
              "default": 1200043151
            },
            "ClientID": {
              "type": "string",
              "description": "User ID ",
              "default": "SYMP"
            },
          }
        },
        "UserLogout": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "successfully logout.",
              "required": true,
              "type": "string",
              "default": "successfully logout from all API."
            },
            "result": {
              "description": "successfully logout.",
              "required": true,
              "type": "object",
              "default":""
            }	
          }
        },
        "UserLogin": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "Valid User"
            },
            "result": {
              "properties": {
                "enums": {
                  "$ref": "#/components/schemas/loginResult"
                },
                
                "clientCodes": {
                  "description": "if 'isInvestorClient' is false, it gives the array list of client mapped with dealer; otherwise single ClientID is returned as invester client.",
                  "type": "array",
                  "default": [
                    "Symp1",
                    "Symp2",
                    "Symp3",
                    "Symp4"
                  ]
                },
                "exchangeSegmentArray": {
                  "description": "",
                  "type": "array",
                  "default": [{key: NSECM, value: NSECM},{key: NSEFO, value: NSEFO}]
                },
                "token": {
                  "description": "The unique, token generated to validate user and get data.",
                  "allOf": [
                    {
                      "name": "token",
                      "in": "path",
                      "description": "The resource identifier string",
                      "required": true,
                      "schema": {
                        "type": "string"
                      },
                      "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiJSVVBFU0giLCJpYXQiOjE1NTIyOTc3NjQsImV4cCI6MTU1MjM4NDE2NH0.2OPqir5cWb0CiUn_23kiY7gOkZN80x5Xu5JUF6WdVGs"
                    }
                  ]
                },
                "userID": {
                  "description": "userID of investor client",
                  "type": "string",
                  "default": "SFT"
                },
                "isInvestorClient": {
                  "description": "If value is true, it's a invester client; else dealer.",
                  "type": "boolean",
                  "default": true
                },
                "isOneTouchUser": {
                  "description": "Interactive Apis version",
                  "type": "string",
                  "default": false
                },
              }
            }
          }
        },
        "HostLookUpLoginResponse": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code-HostLookUp"
            },
            "description": {
              "description": "host look up succeeded",
              "required": true,
              "type": "string",
              "default": "host look up succeeded"
            },
            "result": {
              "properties": {
                "UniqueKey": {
                  "description": "Unique Key is generated by server during HostLookUp",
                  "type": "array",
                  "default":"XYZ"
                },
                "ServerIP": {
                  "description": "IP address of the server in which client needs to connect",
                  "type": "string",
                  "default": "192.168.52.35"
                },
                "Port": {
                  "description": "Port number of a server",
                  "type": "string",
                  "default": "3009"
                },
                "InstanceName": {
                  "description": "Instance name of a server in which client needs to connect",
                  "type": "string",
                  "default": "interactive123"
                },
              }
            }
          }
        },
        "loginResult": {
          "description": "Data received from call",
          "type": "Object",
          "enum": [
            "socketEvent",
            "orderSide",
            "orderSource",
            "positionSqureOffMode",
            "positionSquareOffQuantityType",
            "dayOrNet",
            "exchangeSegment",
            "instrumentType",
            "exchangeInfo"
          ],
          "default":"socketEvent:[joined,  error,  warning,  success,  order,  trade,  logout,  position,  tradeConversion],\n
          orderSide: [BUY,  SELL
          ],\n
          orderSource: [TWS,  TWSAPI,  Web,  WebAPI,  MobileAndroid,  MobileAndroidAPI,  MobileWindows,  MobileWindowsAPI,  MobileIOS,  MobileIOSAPI,  OEMS,  Algo,  FIX
          ],\n
          positionSqureOffMode: [DayWise,  NetWise
          ],\n
          positionSquareOffQuantityType: [Percentage,  ExactQty
          ],\n
          dayOrNet: [DAY,  NET
          ],\n
          instrumentType: [Futures, Options, Spread, Equity, Spot, PreferenceShares, Debentures, Warrants, Miscellaneous, MutualFund
          ],\n
          exchangeSegment: [NSECM, NSEFO, NSECD, NSECOMMODITY, BSECM, BSEFO, BSECD, NCDEX, MCXFO
          ]\n
          exchangeInfo: {NSECM: {productType: [1: MIS, 2: NRML, 4: CNC, MIS: 1, NRML: 2, CNC: 4
              ],  orderType: [StopLimit, StopMarket, Limit, Market
              ], timeInForce: [DAY, IOC]\n
            }
          }\n
         "
        },
        "Error": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Error for request"
            },
            "code": {
              "type": "string",
              "description": "e-user-0001 to e-user-004"
            },
            "description": {
              "type": "string",
              "description": "Reason for failed request"
            }
          }
        },
        "ErrorLogin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Error for request"
            },
            "code": {
              "type": "string",
              "description": "e-user-0001 to e-user-004"
            },
            "description": {
              "type": "string",
              "description": "Reason for failed request"
            }
          }
        },
        
        "ErrorHostLookUp": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Error for request"
            },
            "code": {
              "type": "string",
              "description": "hostlookup"
            },
            "description": {
              "type": "string",
              "description": "Invalid access password provided"
            }
          }
        },
        "UserProfile": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "User profile"
            },
            "result": {
              "properties": {
                "ClientId": {
                  "description": "Uniquely identifies the user",
                  "type": "string",
                  "default": "SYMP1"
                },
                "ClientName": {
                  "description": "Name of the user",
                  "type": "string",
                  "default": "SYMP"
                },
                "EmailId": {
                  "description": "E-mail address of user",
                  "type": "string",
                  "default": "symp.t@symphonyfintech.com"
                },
                "MobileNo": {
                  "description": "Phone number of user",
                  "type": "string",
                  "default": "5555587878"
                },
                "PAN": {
                  "description": "Pancard number of user",
                  "type": "string",
                  "default": "HSDIG2342J"
                },
                "IncludeInAutoSquareoff": {
                  "description": "Include in Auto Squareoff or not",
                  "type": "boolean",
                  "default": true
                },
                "IncludeInAutoSquareoffBlocked": {
                  "description": "Include in Auto SquareoffBlocked or not",
                  "type": "boolean",
                  "default": false
                },
                "IsProClient": {
                  "description": "Is it a Pro client or not",
                  "type": "boolean",
                  "default": false
                },
                "IsInvestorClient": {
                  "description": "It is defines that user is IsInvestorClient or Delear etc",
                  "type": "string",
                  "default": true
                },
                "ResidentialAddress": {
                  "description": "It defines Residential Address User ",
                  "type": "string",
                  "default": "1"
                },
                "OfficeAddress": {
                  "description": "It defines Office Address User ",
                  "type": "string",
                  "default": "address"
                },
                "ClientBankInfoList": {
          "type": "object",
          "required": [],
          "properties": {
            "ClientId": {
              "type": "string",
              "description":"Represents unique ClientID of a user.",
              "default": "SYMP1"
            },
            "AccountNumber": {
              "type": "double",
              "description": "Represents Bank Account Number of a user.",
              "default": "1234567890123456"
            },
            "AccountType": {
              "type": "string",
              "description": "Represents Bank Account Type.",
              "default": "Current"
            },
            "BankName": {
              "type": "string",
              "description": "Represents name a bank.",
              "default": "ICICI Bank"
            },
            "BankBranchName": {
              "type": "string",
              "description": "Represents branch name of a bank.",
              "default": "Andheri"
            },
            "BankCity": {
              "type": "string",
              "description": "Represents city name of a bank.",
              "default": "Mumbai"
            },
            "CustomerId": {
              "type": "double",
              "description": "Represents bank customer ID number of a user.",
              "default": "87654321"
            },
            "BankCityPincode": {
              "type": "double",
              "description": "Represents pincode number of a bank.",
              "default": "400093"
            },
            "BankIFSCCode": {
              "type": "string",
              "description": "Represents IFSC code of a bank.",
              "default": "ICICI1000456789"
            }
          }
          },
                "ClientExchangeDetailsList": {
                  "type": "object",
                  "required": [],
                  "properties": {
                      "NSECM": {
                      "type": "object",
                      "required": [],
                      "properties": {
                      "ClientId": {
                          "type": "string",
                          "description":"Represents unique clientID of a user.",
                          "default": "SYMP1"
                          },
                      "ExchangeSegNumber": {
                          "type": "double",
                          "description": "Represents exchange segment number.",
                          "default": 1
                          },
                      "Enabled": {
                          "type": "boolean",
                          "description": "Represents whether exchange segment is enabled for user.",
                          "default": true
                          },
                      "ParticipantCode": {
                          "type": "double",
                          "description": "Represents participant code of a exchange.",
                          "default": "10000001"
                          }
                          }
                      },
                      "NSEFO": {
                      "type": "object",
                      "required": [],
                      "properties": {
                      "ClientId": {
                          "type": "string",
                          "description":"Represents unique clientID of a user.",
                          "default": "SYMP1"
                          },
                      "ExchangeSegNumber": {
                          "type": "double",
                          "description": "Represents exchange segment number.",
                          "default": 2
                          },
                      "Enabled": {
                          "type": "boolean",
                          "description": "Represents whether exchange segment is enabled for user.",
                          "default": true
                          },
                      "ParticipantCode": {
                          "type": "double",
                          "description": "Represents participant code of a exchange.",
                          "default": "10000002"
                          }
                          }
                      },
                      "NSECD": {
                      "type": "object",
                      "required": [],
                      "properties": {
                      "ClientId": {
                          "type": "string",
                          "description":"Represents unique clientID of a user.",
                          "default": "SYMP1"
                          },
                      "ExchangeSegNumber": {
                          "type": "double",
                          "description": "Represents exchange segment number.",
                          "default": 3
                          },
                      "Enabled": {
                          "type": "boolean",
                          "description": "Represents whether exchange segment is enabled for user.",
                          "default": true
                          },
                      "ParticipantCode": {
                          "type": "double",
                          "description": "Represents participant code of a exchange.",
                          "default": "10000003"
                          }
                          }
                      }
                  }
                  }
              }
            }
          }
        },
        "DealerCrediential": {
          "type": "object",
          "required": [],
          "properties": {
            "DealerId": {
              "type": "string"
            },
            "MacId": {
              "type": "string"
            },
            "ServerVerficationImageId": {
              "type": "integer"
            },
            "LoginPassword": {
              "type": "password"
            },
            "TransactionPassword": {
              "type": "password"
            },
            "Enabled": {
              "type": "boolean"
            },
            "EnabledOn": {
              "type": "date"
            },
            "ReasonDisabled": {
              "type": "string"
            },
            "DisabledOn": {
              "type": "date"
            },
            "InvalidAttempts": {
              "type": "integer"
            },
            "Invalid2FAAttempts": {
              "type": "integer"
            },
            "Level2FAChangedOn": {
              "type": "date"
            },
            "TransactionPasswordChangedOn": {
              "type": "date"
            },
            "LoginPasswordChangedOn": {
              "type": "date"
            },
            "LastSuccessfulLoginOn": {
              "type": "date"
            },
            "LastUpdatedOn": {
              "type": "date"
            },
            "DaysOfWarning": {
              "type": "integer"
            },
            "ClientId": {
              "type": "string"
            },
            "ReGenLoginPassword": {
              "type": "password"
            },
            "ReGenTransPassword": {
              "type": "password"
            },
            "Reset2FA": {
              "type": "boolean"
            },
            "DateOfBirth": {
              "type": "date"
            },
            "UserAccessType": {
              "type": "integer"
            },
            "Privilege": {
              "type": "integer"
            },
            "RoleName": {
              "type": "string"
            },
            "ClientOverview": {
              "type": "boolean"
            },
            "MaxScripPerSession": {
              "type": "integer"
            },
            "IPAddress": {
              "type": "string"
            }
          }
        },
        "UserBalance": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "OK"
            },
            "result": {
              "properties": {
                "BalanceList": {
                  "$ref": "#/components/schemas/BalanceList"
                }
              }
            }
          }
        },
        "BalanceList": {
          "type": "object",
          "required": [],
          "properties": {
            "limitHeader": {
              "type": "string",
              "description": "",
              "default": "ALL|ALL|ALL"
            },
            "limitObject": {
              "$ref": "#/components/schemas/limitObject"
            }
          }
        },
        "limitObject": {
          "type": "object",
          "required": [],
          "properties": {
            "RMSSubLimits": {
              "$ref": "#/components/schemas/RMSSubLimits"
            },
            "marginAvailable": {
              "$ref": "#/components/schemas/marginAvailable"
            },
            "marginUtilized": {
              "$ref": "#/components/schemas/marginUtilized"
            },
            "limitsAssigned": {
              "$ref": "#/components/schemas/limitsAssigned"
            },
            "AccountID": {
              "type": "string",
              "description": "Uniquely identifies the user",
              "default": "SYMP"
            }
          }
        },
        "RMSSubLimits": {
          "type": "object",
          "required": [],
          "properties": {
            "cashAvailable": {
              "type": "double",
              "description":"Represents the ‘Cash Margin Available’ set for the entity in RMS Set
              Limits window",
              "default": 99999999999999
            },
            "collateral": {
              "type": "double",
              "description": "Margin derived from pledged stocks",
              "default": 0
            },
            "marginUtilized": {
              "type": "double",
              "description": "Represents the present Margin Utilized by that entity.",
              "default": 52955.278
            },
            "netMarginAvailable": {
              "type": "double",
              "description": "Net cash balance available for trading (intraday_payin + adhoc_margin + collateral)",
              "default": 99999999949541.72
            },
            "MTM": {
              "type": "double",
              "description": "Represents the MtoM present for that entity.",
              "default": 0
            },
            "UnrealizedMTM": {
              "type": "double",
              "description": "Represents the unrealized MtoM present for that entity.",
              "default": 0
            },
            "RealizedMTM": {
              "type": "double",
              "description": "Represents the realized MtoM present for that entity.",
              "default": 0
            }
          }
        },
        "marginAvailable": {
          "type": "object",
          "required": [],
          "properties": {
            "CashMarginAvailable": {
              "type": "double",
              "description":"Represents the ‘Cash Margin Available’ set for the entity in RMS Set
              Limits window",
              "default": "99999999999999"
            },
              "AdhocMargin": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "NotinalCash": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "PayInAmount": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "PayOutAmount": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "CNCSellBenifit": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "DirectCollateral": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "HoldingCollateral": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "ClientBranchAdhoc": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "SellOptionsPremium": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "TotalBranchAdhoc": {
              "type": "double",
              "description":"",
              "default": "0"
            },
              "AdhocFOMargin": {
              "type": "double",
              "description":"",
              "default": "NaN"
            },
              "AdhocCurrencyMargin": {
              "type": "double",
              "description":"",
              "default": "NaN"
            },
                "AdhocCommodityMargin": {
              "type": "double",
              "description":"",
              "default": "NaN"
            },
          }
        },
        "marginUtilized": {
          "type": "object",
          "required": [],
          "description": "Represents the present Margin Utilized by that entity.",
          "properties": {
            "GrossExposureMarginPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "BuyExposureMarginPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "SellExposureMarginPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "VarELMarginPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "ScripBasketMarginPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "GrossExposureLimitPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "BuyExposureLimitPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "SellExposureLimitPresent": {
              "type": "double",
              "description":"",
              "default": "0"
            },
            "CNCLimitUsed": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘CNC Limit’ in RMS Set Limits
              window.",
              "default": "0"
            },
            "CNCAmountUsed": {
              "type": "double",
              "description":"Represents the value used for the entity in ‘CNC Limit’ in RMS Set Limits
              window.",
              "default": "1671"
            },
            "MarginUsed": {
              "type": "double",
              "description": "Represents the present Margin Utilized by that entity.",
              "default": "52955.2789"
            },
            "LimitUsed": {
              "type": "integer",
              "description": "",
              "default": "NaN"
            },
            "TotalSpanMargin": {
              "type": "double",
              "description":"Represents the Span margin present/ utilized for that entity, if the
              corresponding rule is added",
              "default": "0"
            },
            "ExposureMarginPresent": {
              "type": "double",
              "description":"Represents the Exposure margin present/ utilized for that entity, if the
              corresponding rule is added",
              "default": "0"
            }
          }
        },
        "limitsAssigned": {
          "type": "object",
          "required": [],
          "properties": {
            "CNCLimit": {
              "type": "double",
              "description":"Represents the value present/ utilized for the entity in ‘CNC Limit’ in RMS Set Limits
              window.",
              "default": "0"
            },
            "TurnoverLimitPresent": {
              "type": "double",
              "description":"Represents the value present/ utilized for the entity in ‘Turnover Limit’ in RMS
              Set Limits window.",
              "default": "0"
            },
            "MTMLossLimitPresent": {
              "type": "double",
              "description":"Represents the value present/ utilized for the entity in ‘Market to Market Loss Limit’ in RMS Set
              Limits window",
              "default": "0"
            },
            "BuyExposureLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Buy Exposure Limit’ in RMS
              Set Limits window.",
              "default": "0"
            },
            "SellExposureLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Sell Exposure Limit’ in RMS
              Set Limits window.",
              "default": "0"
            },
            "GrossExposureLimit": {
              "type": "double",
              "description":"Represents the value set in the ‘Gross Exposure Limit’ field in the RMS
              Set Limits window for that entity.",
              "default": "0"
            },
            "GrossExposureDerivativesLimit": {
              "type": "double",
              "description":"Represents the value set in the ‘Gross Exposure Limit for Derivatives’
              field in the RMS Set Limits window for that entity.",
              "default": "0"
            },
            "BuyExposureFuturesLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Buy Exposure Limit for
              Futures’ in RMS Set Limits window",
              "default": "0"
            },
            "BuyExposureOptionsLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Buy Exposure Limit for
              Options’ in RMS Set Limits window",
              "default": "0"
            },
            "SellExposureOptionsLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Sell Exposure Limit for
              Options’ in RMS Set Limits window",
              "default": "0"
            },
            "SellExposureFuturesLimit": {
              "type": "double",
              "description":"Represents the value set for the entity in ‘Sell Exposure Limit for
              Futures’ in RMS Set Limits window",
              "default": "0"
            }
          }
        },
        "PortfolioHolding": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "Success holding"
            },
            "result": {
              "properties": {
                "ClientId": {
                  "type": "string",
                  "description": "Uniquely identifies the user",
                  "default": "SYMP1"
                },
                "RMSHoldingList":{
                 "items" :{
                  "$ref": "#/components/schemas/RMSHoldingList"
                  }
                },
                "CollateralHoldingList":{
                 "items" :{
                  "$ref": "#/components/schemas/CollateralHoldingList"
                  }
                }
              }
            }
          }
        },
        "RMSHoldingList": {
          "type": "object",
          "properties": {
              "Holdings": {
              "type": "object",
              "properties": {
                  "INF457M01133": {
                  "type": "object",
                  "properties": {
            "ISIN": {
              "type": "string",
              "description": "ISIN Number of the script",
              "default": "INF457M01133"
            },
            "RMSHoldingId": {
              "type": "integer",
              "description": "",
              "default": 21885
            },
            "ClientId": {
              "type": "string",
              "description": "",
              "default": "SYMP1"
            },
            "ExchangeNSEInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 2328
            },
            "ExchangeBSEInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 538057
            },
            "ExchangeMSEIInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "HoldingType": {
              "type": "integer",
              "description": "",
              "default": 2
            },
            "HoldingQuantity": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "CollateralValuationType": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "Haircut": {
              "type": "integer",
              "description": "",
              "default": 15
            },
            "CollateralQuantity": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "CreatedBy": {
              "type": "string",
              "description": "",
              "default": "ADMIN2"
            },
            "LastUpdatedBy": {
              "type": "string",
              "description": "",
              "default": "ADMIN2"
            },
            "CreatedOn": {
              "type": "date",
              "description": "",
              "default": "2019-07-06T12:18:21"
            },
            "LastUpdatedOn": {
              "type": "date",
              "description": "",
              "default": "2019-07-06T11:39:29"
            },
            "UsedQuantity": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsCollateralHolding": {
              "type": "boolean",
              "description": "",
              "default": true
            },
            "BuyAvgPrice": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsBuyAvgPriceProvided": {
              "type": "boolean",
              "description": "",
              "default": false
            },
            "AuthorizeQuantity": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsNeedToDelete": {
              "type": "boolean",
              "description": "",
              "default": false
              }
              }
              }
              }
              }
          }
        },
        "CollateralHoldingList": {
          "type": "object",
          "properties": {
              "Holdings": {
              "type": "object",
              "properties": {
                  "INF457M01133": {
                  "type": "object",
                  "properties": {
            "ISIN": {
              "type": "string",
              "description": "ISIN Number of the script",
              "default": "INF457M01133"
            },
            "RMSHoldingId": {
              "type": "integer",
              "description": "",
              "default": 21885
            },
            "ClientId": {
              "type": "string",
              "description": "",
              "default": "SYMP1"
            },
            "ExchangeNSEInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 2328
            },
            "ExchangeBSEInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 538057
            },
            "ExchangeMSEIInstrumentId": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "HoldingType": {
              "type": "integer",
              "description": "",
              "default": 2
            },
            "HoldingQuantity": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "CollateralValuationType": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "Haircut": {
              "type": "integer",
              "description": "",
              "default": 15
            },
            "CollateralQuantity": {
              "type": "integer",
              "description": "",
              "default": 1
            },
            "CreatedBy": {
              "type": "string",
              "description": "",
              "default": "ADMIN2"
            },
            "LastUpdatedBy": {
              "type": "string",
              "description": "",
              "default": "ADMIN2"
            },
            "CreatedOn": {
              "type": "date",
              "description": "",
              "default": "2019-07-06T12:18:21"
            },
            "LastUpdatedOn": {
              "type": "date",
              "description": "",
              "default": "2019-07-06T11:39:29"
            },
            "UsedQuantity": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsCollateralHolding": {
              "type": "boolean",
              "description": "",
              "default": true
            },
            "BuyAvgPrice": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsBuyAvgPriceProvided": {
              "type": "boolean",
              "description": "",
              "default": false
            },
            "AuthorizeQuantity": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "IsNeedToDelete": {
              "type": "boolean",
              "description": "",
              "default": false
              }
              }
              }
              }
              }
          }
        },
        "PlaceOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "Request sent"
            },
            "result": {
              "properties": {
                "AppOrderID": {
                  "type": "integer",
                  "description": "It is system generated unique order number",
                  "default": 648468731
                },
                "OrderUniqueIdentifier": {
                  "type": "string",
                  "description": "It is user specific Order Unique Identifier",
                  "default": "123abc"
                },
                "ClientID": {
                  "type": "string",
                  "description": "Client unique Id",
                  "default": "SYMP1"
                }
              }
            }
          }
        },
        
        "CancelAllOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code-CancelAllOrder"
            },
            "description": {
              "description": "Cancel All request send successfully or not",
              "required": true,
              "type": "string",
              "default": "Cancel All Order Request Send Successfully"
            },
            "result": {
              "description": "Request sent successfully",
              "required": true,
              "type": "object",
              "default":""
            }	
          }
        },
        
        "BracketOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "Request sent"
            },
            "result": {
              "properties": {
                "AppOrderID": {
                  "type": "integer",
                  "description": "It is system generated unique order number",
                  "default": 648468731
                }
              }
            }
          }
        },
        "PlaceCoverOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Valid/Invalid User",
              "required": true,
              "type": "string",
              "default": "Request sent"
            },
            "result": {
              "properties": {
                "EntryAppOrderID": {
                  "type": "integer",
                  "description": "It is system generated unique order number for entry order",
                  "default": 1323797170
                },
                "ExitAppOrderID": {
                  "type": "integer",
                  "description": "It is system generated unique order number for stop loss order",
                  "default": 3727296468
                }
              }
            }
          }
        },
        "ExitCoverOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "Request Sent",
              "type": "string",
              "required": true,
              "default": "Request sent"
            }
          }
        },
        "GetOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "order book",
              "default": "Success order book"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/schemas/OrderTradeResult"
              }
            }
          }
        },
        "OrderHistory": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "order history",
              "default": "Success order history"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/schemas/OrderTradeResult"
              }
            }
          }
        },
        "OrderTradeResult": {
          "type": "object",
          "required": [],
          "properties": {
            "LoginID": {
              "type": "string",
              "description": "User login ID ",
              "default": "SYMP1"
            },
            "ClientID": {
              "type": "string",
              "description": "Uniquely identifies the user",
              "default": "SYMP1"
            },
            "AppOrderID": {
              "type": "integer",
              "description": "It is system generated unique order number",
              "default": 648468730
            },
            "OrderReferenceID": {
              "type": "string",
              "description": "It is unique OrderReferenceID to indentify more than 1 leg orders.",
              "default": ""
            },
            "GeneratedBy": {
              "type": "string",
              "description": "It represents device from which operation has been performed",
              "default": "TWSAPI"
            },
            "ExchangeOrderID": {
              "type": "string",
              "description": "It is unique ExchangeOrderID generated by exchange",
              "default": "1005239196374108"
            },
            "OrderCategoryType": {
              "type": "string",
              "description": "it represents order market type, i.e. Normal, auction etc",
              "default": "NORMAL"
            },
            "ExchangeSegment": {
              "type": "string",
              "description": "It is a segment, which represents cash, derivative, commodity, or currency market.",
              "default": "NSECM"
            },
            "ExchangeInstrumentID": {
              "type": "integer",
              "description": "Instrument Unique ID",
              "default": 16921
            },
            "OrderSide": {
              "type": "string",
              "description": "Order is Buy or Sell",
              "default": "BUY"
            },
            "OrderType": {
              "type": "string",
              "description": "The most common types of orders are market orders, limit orders, and stop-loss orders.
                    A market order is an order to buy or sell a security immediately. The investor could submit a limit order for this amount and
                    this order will only execute if the price of ABC stock is ₹10 or lower",
              "default": "Limit"
            },
            "ProductType": {
              "type": "string",
              "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
             "default": "NRML"
            },
            "TimeInForce": {
              "type": "string",
              "description": "Time in force is a special instruction used when placing a trade to indicate how long an order will remain active before it is executed or expires.
                 These options are especially important for active traders and allow them to be more specific about the time parameters.",
              "default": "DAY"
            },
            "OrderPrice": {
              "type": "double",
              "description": "Order Price is the price of Sell or Buy orders",
              "default": 254.55
            },
            "OrderQuantity": {
              "type": "integer",
              "description": "Order Quantity is the number of Sell or Buy orders",
              "default": 15
            },
            "OrderStopPrice": {
              "type": "double",
              "description": "A stop price is a price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
            a market sell order is triggered when the market price reaches or falls below the stop price.",
            "default": 0
            },
            "OrderStatus": {
              "type": "string",
              "description": "It is the status of order i.e. open, filled, rejected ,cancel etc",
              "default": "New"
            },
            "OrderAverageTradedPrice": {
              "type": "string",
              "description": "Average traded price, also referred to as volume-weighted average price, is what buyers have paid for one share on average, 
                over the course of a specific time period. It is most frequently calculated for a single day but is equally useful for weekly, monthly or yearly periods",
                "default": "250.4"
            },
            "LeavesQuantity": {
              "type": "integer",
              "description": "The remaining shares still left to buy/sell of a single instrument on an order.",
              "default": 1
            },
            "CumulativeQuantity": {
              "type": "integer",
              "description": "The total number of shares bought/sold on a single order for a single instrument.",
              "default": 0
            },
            "OrderDisclosedQuantity": {
              "type": "integer",
              "description":"It is an order in which only a part of the order quantity is disclosed to the market. 
                The next part is automatically released after the previous order quantity is fulfilled and so on till the full order is executed.
                For example, if you wish to buy 2000 shares of UTI Bank, you can enter the disclosed quantity as 200.",
              "default": 0
            },
            "OrderGeneratedDateTime": {
              "type": "date",
              "description": "Order time",
              "default": "14-05-2021 11:17:29"
            },
            "ExchangeTransactTime": {
              "type": "date",
              "description": "Exchange Transcation Order time",
              "default": "14-05-2021 11:17:30"
            },
            "LastUpdateDateTime": {
              "type": "date",
              "description": "Order modifyed Time",
              "default": "14-05-2021 11:17:29"
            },
            "OrderExpiryDate": {
              "type": "date",
              "description": "It is order expiry date of order when order validity set to GTD(Good Till Date) to keep order in system till this date otherwise order gets canceled. ",
              "default": "01-01-1980 00:00:00"
            },
            "CancelRejectReason": {
              "type": "string",
              "description": "It is reason if order rejected or canceled ",
              "default": ""
            },
            "OrderUniqueIdentifier": {
              "type": "string",
              "description": "It is user specific Order Unique Identifier",
              "default": "123abc"
            },
            "OrderLegStatus": {
              "type": "string",
              "description": "It represent type of order i.e single ,second ,multileg",
              "default": "SingleOrderLeg"
            },
            "BoLegDetails": {
              "type": "string",
              "description": "",
              "default": 0
            },
            "IsSpread": {
              "type": "string",
              "description": "",
              "default": false
            },
            "BoEntryOrderId": {
              "type": "string",
              "description": "",
              "default": ""
            },
            "MessageCode": {
              "type": "string",
              "description": "",
              "default": 9004
            },
            "MessageVersion": {
              "type": "string",
              "description": "",
              "default": 4
            },
            "TokenID": {
              "type": "string",
              "description": "",
              "default": 0
            },
            "ApplicationType": {
              "type": "string",
              "description": "",
              "default": 0
            },
            "SequenceNumber": {
              "type": "string",
              "description": "",
              "default": 0
            }
          }
        },
        "GetTradedOrder": {
          "type": "object",
          "required": [],
          "properties": {
            "type": {
              "$ref": "#/components/headers/Response-Type"
            },
            "code": {
              "$ref": "#/components/headers/Response-Code"
            },
            "description": {
              "description": "traded order book",
              "required": true,
              "type": "string",
              "default": "Success trade book"
            },
            "result":{
              "type" : "array",
             "items" :{
              "$ref": "#/components/schemas/TradedOrderResult"
              }
            }
          }
        },
        "TradedOrderResult": {
          "type": "object",
          "properties": {
            "LoginID": {
              "type": "string",
              "description": "User login ID ",
              "default": "SYMP"
            },
            "ClientID": {
              "type": "string",
              "description": "Uniquely identifies the user",
              "default": "SYMP"
            },
            "AppOrderID": {
              "type": "integer",
              "description": "It is system generated unique order number",
              "default": 648468731
            },
            "OrderReferenceID": {
              "type": "string",
              "description": "It is unique OrderReferenceID",
              "default": ""
            },
            "GeneratedBy": {
              "type": "string",
              "description": "It represents device from which operation has been performed",
              "default": "TWSAPI"
            },
            "ExchangeOrderID": {
              "type": "string",
              "description": "It is unique ExchangeOrderID generated by exchange",
              "default": "1005239196374109"
            },
            "OrderCategoryType": {
              "type": "string",
              "description": "it represents order market type, i.e. Normal, auction etc",
              "default": "NORMAL"
            },
            "ExchangeSegment": {
              "type": "string",
              "description": "It is a segment, which represents cash, derivative, commodity, or currency market.",
              "default": "NSECM"
            },
            "ExchangeInstrumentID": {
              "type": "integer",
              "description": "Instrument Unique ID",
              "default": "16921"
            },
            "OrderSide": {
              "type": "string",
              "description": "Order is Buy or Sell",
              "default": "BUY"
            },
            "OrderType": {
              "type": "string",
              "description": "The most common types of orders are market orders, limit orders, and stop-loss orders.
                      A market order is an order to buy or sell a security immediately. The investor could submit a limit order for this amount and
                      this order will only execute if the price of ABC stock is ₹10 or lower",
                "default": "Limit"
            },
            "ProductType": {
              "type": "string",
              "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
                "default": "NRML"
            },
            "TimeInForce": {
              "type": "string",
              "description": "Time in force is a special instruction used when placing a trade to indicate how long an order will remain active before it is executed or expires.
                   These options are especially important for active traders and allow them to be more specific about the time parameters.",
                "default": "DAY"
            },
            "OrderPrice": {
              "type": "double",
              "description": "Order Price is the price of Sell or Buy orders",
              "default": 254.55
            },
            "OrderQuantity": {
              "type": "integer",
              "description": "Order Quantity is the number of Sell or Buy orders",
              "default": 1
            },
            "OrderStopPrice": {
              "type": "double",
              "description": "A stop price is a price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
              a market sell order is triggered when the market price reaches or falls below the stop price.",
              "default": 0
            },
            "OrderStatus": {
              "type": "string",
              "description": "It is the status of order i.e. open, filled, rejected ,cancel etc",
              "default": "Filled"
            },
            "OrderAverageTradedPrice": {
              "type": "string",
              "description": "Average traded price, also referred to as volume-weighted average price, is what buyers have paid for one share on average, 
                  over the course of a specific time period. It is most frequently calculated for a single day but is equally useful for weekly, monthly or yearly periods",
                "default": "254.55"
            },
            "LeavesQuantity": {
              "type": "integer",
              "description": " The remaining shares still left to buy/sell of a single stock on an order.",
              "default": 0
            },
            "CumulativeQuantity": {
              "type": "integer",
              "description": " The total number of shares bought/sold on a single order for a single stock.",
              "default": 1
            },
            "OrderDisclosedQuantity": {
              "type": "integer",
              "description":"It is an order in which only a part of the order quantity is disclosed to the market. 
                  The next part is automatically released after the previous order quantity is fulfilled and so on till the full order is executed.
                  For example, if you wish to buy 2000 shares of UTI Bank, you can enter the disclosed quantity as 200.",
                "default": 0
            },
            "OrderGeneratedDateTime": {
              "type": "date",
              "description": "Order time",
              "default": "14-05-2021 11:17:29"
            },
            "ExchangeTransactTime": {
              "type": "date",
              "description": "Exchange Transcation Order time",
              "default": "14-05-2021 11:17:30"
            },
            "LastUpdateDateTime": {
              "type": "date",
              "description": "Order modifyed Time",
              "default": "14-05-2021 11:17:29"
            },
            "OrderUniqueIdentifier": {
              "type": "string",
              "description": "It is user specific Order Unique Identifier",
              "default": "123abc"
            },
            "OrderLegStatus": {
              "type": "string",
              "description": "It represent type of order i.e single ,second ,multileg",
              "default": "SingleOrderLeg"
            },
            "LastTradedPrice": {
              "type": "double",
              "description": "It represent traded price when order is executed",
              "default": 254.55
            },
            "LastTradedQuantity": {
              "type": "integer",
              "description": "It represent traded quantity when order is executed",
              "default": 1
            },
            "LastExecutionTransactTime": {
              "type": "string",
              "description": "It represent TransactTime when order is executed",
              "default": "14-05-2021 11:17:29"
            },
            "ExecutionID": {
              "type": "integer",
              "description": "",
              "default": "3308927"
            },
            "ExecutionReportIndex": {
              "type": "integer",
              "description": "",
              "default": 3
            },
            "IsSpread": {
              "type": "integer",
              "description": "",
              "default": false
            },
            "MessageCode": {
              "type": "integer",
              "description": "",
              "default": 9005
            },
            "MessageVersion": {
              "type": "integer",
              "description": "",
              "default": 4
            },
            "TokenID": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "ApplicationType": {
              "type": "integer",
              "description": "",
              "default": 0
            },
            "SequenceNumber": {
              "type": "integer",
              "description": "",
              "default": 0
            }
          }
        },
        "PostionResult":{
          "type": "object",
          "properties": {
           "AccountID": {
              "type": "string",
              "description": "Account ID",
              "default": "SYMP1"
            },
             "TradingSymbol": {
              "type": "string",
              "description": "Symbol",
              "default": "ACC"
            },
            "ExchangeSegment": {
              "type": "string",
              "description": "Exchange",
              "default": "NSECM"
            },
            "ExchangeInstrumentID": {
              "type": "integer",
              "description": "Instrument Unique ID",
              "default": "22"
            },
            "ProductType": {
              "type": "string",
              "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
              "default": "CNC"
            },
            "Marketlot": {
              "type": "integer",
              "description": "Marketlot",
              "default": "1"
            },
            "Multiplier": {
              "type": "integer",
              "description": "Multiplier",
              "default": "1"
            },
            "BuyAveragePrice": {
              "type": "string",
              "description": "Average buy price of position",
              "default": "41.78"
            },
            "SellAveragePrice": {
              "type": "string",
              "description": "Average sell price of position",
              "default": "41.63"
            },
            "OpenBuyQuantity": {
              "type": "integer",
              "description": "Total bought quantity",
              "default": "10"
            },
            "OpenSellQuantity": {
              "type": "integer",
              "description": "Total sold quantity",
              "default": "0"
            },
            "Quantity": {
              "type": "integer",
              "description": "Net outstanding quantity ",
              "default": "10"
            },
            
            "BuyAmount": {
              "type": "string",
              "description": "Total buy value of position in rupees",
              "default": "1671.00"
            },
            "SellAmount": {
              "type": "string",
              "description": "Total sell value of position in rupees",
              "default": "2498.00"
            },
            "NetAmount": {
              "type": "string",
              "description": "Outstanding position value in rupees ",
              "default": "827.00"
            },
            "UnrealizedMTM": {
              "type": "string",
              "description": "It's unrealized profit or loss which has not been booked by client",
              "default": "0"
            },
            "RealizedMTM": {
              "type": "string",
              "description": "It's realized profit or loss which has been booked by client",
              "default": "0"
            },
            "MTM": {
              "type": "string",
              "description": "It's profit or loss of position",
              "default": "0"
            },
            "BEP": {
              "type": "string",
              "description": "It's break even point of position",
              "default": "0"
            },
            "SumOfTradedQuantityAndPriceBuy": {
              "type": "string",
              "description": "Total buy value of position in rupees",
              "default": "1671.00"
            },
            "SumOfTradedQuantityAndPriceSell": {
              "type": "string",
              "description": "Total sell value of position in rupees",
              "default": "2498.00"
            },
            "statisticsLevel": {
              "type": "string",
              "description": "Statistics Level",
              "default": "ParentLevel"
            },
            "isInterOpPosition": {
              "type": "string",
              "description": "Interoperability is enabled or disabled",
              "default": "true"
            },
            "childPositions": {
              "type": "object",
              "required": [],
              "properties": {
                  AccountID": {
              "type": "string",
              "description": "Account ID",
              "default": "SYMP1"
            },
             "TradingSymbol": {
              "type": "string",
              "description": "Symbol",
              "default": "ACC"
            },
            "ExchangeSegment": {
              "type": "string",
              "description": "Exchange",
              "default": "NSECM"
            },
            "ExchangeInstrumentID": {
              "type": "integer",
              "description": "Instrument Unique ID",
              "default": "22"
            },
            "ProductType": {
              "type": "string",
              "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
              "default": "CNC"
            },
            "Marketlot": {
              "type": "integer",
              "description": "Marketlot",
              "default": "1"
            },
            "Multiplier": {
              "type": "integer",
              "description": "Multiplier",
              "default": "1"
            },
            "BuyAveragePrice": {
              "type": "string",
              "description": "Average buy price of position",
              "default": "41.78"
            },
            "SellAveragePrice": {
              "type": "string",
              "description": "Average sell price of position",
              "default": "41.63"
            },
            "OpenBuyQuantity": {
              "type": "integer",
              "description": "Total bought quantity",
              "default": "10"
            },
            "OpenSellQuantity": {
              "type": "integer",
              "description": "Total sold quantity",
              "default": "0"
            },
            "Quantity": {
              "type": "integer",
              "description": "Net outstanding quantity ",
              "default": "10"
            },
            
            "BuyAmount": {
              "type": "string",
              "description": "Total buy value of position in rupees",
              "default": "1671.00"
            },
            "SellAmount": {
              "type": "string",
              "description": "Total sell value of position in rupees",
              "default": "2498.00"
            },
            "NetAmount": {
              "type": "string",
              "description": "Outstanding position value in rupees ",
              "default": "827.00"
            },
            "UnrealizedMTM": {
              "type": "string",
              "description": "It's unrealized profit or loss which has not been booked by client",
              "default": "0"
            },
            "RealizedMTM": {
              "type": "string",
              "description": "It's realized profit or loss which has been booked by client",
              "default": "0"
            },
            "MTM": {
              "type": "string",
              "description": "It's profit or loss of position",
              "default": "0"
            },
            "BEP": {
              "type": "string",
              "description": "It's break even point of position",
              "default": "0"
            },
            "SumOfTradedQuantityAndPriceBuy": {
              "type": "string",
              "description": "Total buy value of position in rupees",
              "default": "1671.00"
            },
            "SumOfTradedQuantityAndPriceSell": {
              "type": "string",
              "description": "Total sell value of position in rupees",
              "default": "2498.00"
            },
            "statisticsLevel": {
              "type": "string",
              "description": "Statistics Level",
              "default": "ParentLevel"
            },
            "isInterOpPosition": {
              "type": "string",
              "description": "Interoperability is enabled or disabled",
              "default": "true"
            },
          }
        },
            "MessageCode": {
              "type": "integer",
              "description": "MessageCode",
              "default": 9002
            },
            "MessageVersion": {
              "type": "integer",
              "description": "Message Version",
              "default": 1
            },
             "TokenID": {
              "type": "integer",
              "description": "TokenID",
              "default": 0
            },
            "ApplicationType": {
              "type": "integer",
              "description": "ApplicationType",
              "default": 0
            },
             "SequenceNumber": {
              "type": "integer",
              "description": "SequenceNumber",
              "default": 0
            }
          }
        }
      },
      "responses": {
        "BadRequest": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "BadRequestLogin": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorLogin"
              }
            }
          }
        },	  
        "BadRequestHostLookUp": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorHostLookUp"
              }
            }
          }
        }
      },
      "parameters": {
        
        "socketEvent": {
          "name": "Socket Event",
          "in": "query",
          "description": "Socket events for request",
          "type": "string",
          "schema": {
            "enum": [
              "joined",
              "error",
              "warning",
              "success",
              "order",
              "trade",
              "logout",
              "position"
            ]
          }
        },
        "appKey": {
          "name": "appKey",
          "in": "query",
          "description": "The API App key",
          "required": true,
          "type": "string",
          "default": "5a75a8676cabe678"
        },
        "userID": {
          "name": "userID",
          "in": "query",
          "description": "User id",
          "required": true,
          "type": "string",
          "default": "SYMP"
        },
        "secretKey": {
          "name": "secretKey",
          "in": "query",
          "description": "secretKey to validate",
          "required": true,
          "type": "string",
          "default": "Doqg107#6V"
        },
        "source": {
          "name": "source",
          "in": "query",
          "description": "Login source of user",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "TWSAPI",
              "WebAPI",
              "MobileAndroidAPI",
              "MobileWindowsAPI",
              "MobileIOSAPI"
            ]
          },
          "default": "WebAPI"
        },
        "uniqueKey": {
          "name": "source",
          "in": "query",
          "description": "Unique Key generated by server ",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
            ]
          },
          "default": "XYZ"
        },
        
        "AccessPassword": {
          "name": "source",
          "in": "query",
          "description": "Access Password of a server",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
            ]
          },
          "default": "ABC"
        },
        "exchangeSegment": {
          "name": "exchangeSegment",
          "in": "query",
          "description": "It is a segment, which represents cash, derivative, commodity, or currency market.",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "NSECM",
              "BSEFO",
              "MCXFO"
            ]
          },
          "default": "NSECM"
        },
        "exchangeInstrumentID": {
          "name": "exchangeInstrumentID",
          "in": "query",
          "description": "Exchange token for instrument.",
          "required": true,
          "type": "integer",
          "default": 3045
        },
        "productType": {
          "name": "productType",
          "in": "query",
          "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "CO",
              "CNC",
              "MIS",
              "NRML"
            ]
          },
          "default": "NRML"
        },
        "orderType": {
          "in": "query",
          "description": "The most common types of orders are market orders, limit orders, and stop-loss orders.
          A market order is an order to buy or sell a security immediately. The investor could submit a limit order for this amount and
          this order will only execute if the price of ABC stock is ₹10 or lower",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "OCO",
              "StopLimit",
              "StopMarket",
              "Limit",
              "Market"
            ]
          },
          "default": "LIMIT"
        },
        "orderSide": {
          "name": "orderSide",
          "in": "query",
          "description": "Order is Buy or Sell",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "BUY",
              "SELL"
            ]
          },
          "default": "BUY"
        },
        "timeInForce": {
          "in": "query",
          "description": "Time in force is a special instruction used when placing a trade to indicate how long an order will remain active before it is executed or expires.
           These options are especially important for active traders and allow them to be more specific about the time parameters.",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "DAY",
              "GTC",
              "IOC",
              "GTD",
              "EOS"
            ]
          },
          "default": "DAY"
        },
        "disclosedQuantity": {
          "name": "disclosedQuantity",
          "in": "query",
          "description": "It is an order in which only a part of the order quantity is disclosed to the market. 
          The next part is automatically released after the previous order quantity is fulfilled and so on till the full order is executed.
           For example, if you wish to buy 2000 shares of UTI Bank, you can enter the disclosed quantity as 200.",
          "required": true,
          "type": "integer",
          "default": 0
        },
        "orderQuantity": {
          "name": "orderQuantity",
          "in": "query",
          "description": "Order Quantity is the number of Sell or Buy orders",
          "required": true,
          "type": "integer",
          "default": 15
        },
        "limitPrice": {
          "name": "limitPrice",
          "in": "query",
          "description": "The limit price is a price used during a limit order when buying a security. This is a price that a buyer wishes to purchase a security at,
           hence the price is delineated by the buyer.",
          "required": true,
          "type": "double",
          "default": 254.55
        },
        "stopPrice": {
          "name": "stopPrice",
          "in": "query",
          "description": "A stop price is a price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
            a market sell order is triggered when the market price reaches or falls below the stop price.",
          "required": true,
          "type": "double",
          "default": 0
        },
        
        "stopLossPrice": {
          "name": "stopLossPrice",
          "in": "query",
          "description": "A stoploss price is the price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
            a market sell order is triggered when the market price reaches or falls below the stop price.",
          "required": true,
          "type": "double",
          "default": 0
        },
        
        
        "orderUniqueIdentifier": {
          "name": "orderUniqueIdentifier",
          "in": "query",
          "description": "It is user specific Order Unique Identifier",
          "required": false,
          "type": "string",
          "default": "123abc"
        },
        "appOrderID": {
          "name": "appOrderID",
          "in": "query",
          "description": "It is system generated unique order number ",
          "required": true,
          "type": "integer",
          "default": 2190766863
        },
        
        "clientID": {
          "name": "clientID",
          "in": "query",
          "description": "Client unique Id",
          "required": true,
          "type": "string",
          "default": SYMP1
        },
        
        "squarOff": {
          "name": "squarOff",
          "in": "query",
          "description": "squarOff",
          "required": true,
          "type": "integer",
          "default": 5
        },
        
        "trailingStoploss": {
          "name": "trailingStoploss",
          "in": "query",
          "description": "trailingStoploss",
          "required": true,
          "type": "integer",
          "default": 5
        },
        
        
        "modifiedProductType": {
          "name": "modifiedProductType",
          "in": "query",
          "description": "When placing an order, you need to select a product code. These product codes identify the category of the order. For example, you can place the below-mentioned product code, CNC – For trading Equity in delivery MIS – For trading Equity & F&O in intraday NRML – For trading F&O, Currency and Commodities for an overnight position. Since these positions are not intraday positions, the margin requirements for these will be as per the overnight margins. Also, they will not be squared off by our system at the end of the trading session.",
          "required": true,
          "type": "string",
          "default": "NRML"
        },
        "modifiedOrderType": {
          "name": "modifiedOrderType",
          "in": "query",
          "description": "ModifiedOrderType will help to modify your ordertype to Limit, Market, StopLimit, StopMarket.",
          "required": true,
          "type": "string",
          "default": "LIMIT"
        },
        "modifiedOrderQuantity": {
          "name": "modifiedOrderQuantity",
          "in": "query",
          "description": "ModifiedOrderQuantity is the number of Sell or Buy orders which user wants to modify",
          "required": true,
          "type": "integer",
          "default": 25
        },
        "modifiedDisclosedQuantity": {
          "name": "modifiedDisclosedQuantity",
          "in": "query",
          "description": "It is an order in which only a part of the order quantity is disclosed to the market. 
          The next part is automatically released after the previous order quantity is fulfilled and so on till the full order is executed.
           For example, if you wish to buy 2000 shares of UTI Bank, you can enter the disclosed quantity as 200.",
          "required": true,
          "type": "integer",
          "default": 0
        },
        "modifiedLimitPrice": {
          "name": "modifiedLimitPrice",
          "in": "query",
          "description": "The Modified limit price is a price used during a limit order when buying a security. This is a price that a buyer wishes to purchase a security at,
           hence the price is delineated by the buyer.",
          "required": true,
          "type": "integer",
          "default": 255.65
        },
        "modifiedStopPrice": {
          "name": "modifiedStopPrice",
          "in": "query",
          "description": "A Modified stop price is the price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
            a market sell order is triggered when the market price reaches or falls below the stop price.",
          "required": true,
          "type": "integer",
          "default": 0
        },
        "modifiedTimeInForce": {
          "name": "modifiedTimeInForce",
          "in": "query",
          "description": "A Modified stop price is the price in a stop order that triggers the creation of a market order. In the case of a Sell on Stop order, 
            a market sell order is triggered when the market price reaches or falls below the stop price.",
          "required": true,
          "type": "integer",
          "default": "DAY"
        },
        "modifiedOrderExpiryDate": {
          "name": "Modified Order Expiry Date",
          "in": "query",
          "description": "",
          "required": true,
          "type": "date"
        },
        "executionID": {
          "name": "executionID",
          "in": "query",
          "description": "It is Unique order executionID",
          "required": true,
          "type": "integer",
          "default": 1556
        },
        "squreoffMode": {
          "name": "squreoffMode",
          "in": "query",
          "description": "It is mode of square off that user want to done i.e. Daywise, Netwise",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "DayWise",
              "NetWise"
            ]
          },
          "default": "DayWise"
        },
        "positionSquareOffQuantityType": {
          "name": "positionSquareOffQuantityType",
          "in": "query",
          "description": "It is type of squareoff quantity i.e. ExactQty or Percentage",
          "required": true,
          "type": "string",
          "schema": {
            "enum": [
              "Percentage",
              "ExactQty"
            ]
          },
          "default": "Percentage"
        },
        "squareOffQtyValue": {
          "name": "squareOffQtyValue",
          "in": "query",
          "description": "it is quantity of squareoff the position",
          "required": true,
          "type": "integer",
          "default": 100.00
        },
        "accountID": {
          "name": "Account ID",
          "in": "query",
          "description": "Uniquely identifies the user",
          "required": true,
          "type": "string",
          "default": "SYMP"
        },
        "memberID": {
          "name": "Member ID",
          "in": "query",
          "description": "Uniquely identifies the broker",
          "required": true,
          "type": "string"
        },
        "isDayWise" :{
          "name": "isDaywise",
          "in": "body",
          "description": "IsDayWise position conversion",
          "required": true,
          "type": "boolean"
        },
        "targetQty" :{
          "name": "Target Quantity",
          "in": "body",
          "description": "Quantity that need to convert",
          "required": true,
          "type": "integer"
        },
        "isInterOpPosition" :{
          "name": "isInterOpPosition",
          "in": "body",
          "description": "InterOpPosition Enabled or Disabled",
          "required": true,
          "type": "boolean",
        },
        "blockOrderSending" :{
          "name": "blockOrderSending",
          "in": "body",
          "description": "block order sending ",
          "required": true,
          "type": "boolean",
          "default": "true"
        },
        "cancelOrders" :{
          "name": "cancelOrders",
          "in": "body",
          "description": "cancel Orders",
          "required": true,
          "type": "boolean",
          "default": "true"
        },
        "marketStatus": {
          "description": "array of market status",
          "required": [],
          "type": "object",
          "properties": {
            "exchangeSegment": {
              "type": "string",
              "description": "Exchange Segment",
              "default": "NSECM"
            },
            "exchangeMarketType": {
              "type": "string",
              "description": "exchange Market Type",
              "default": "NORMAL"
            },
            "exchangeTradingSession": {
              "type": "string",
              "description": "exchange Trading Session",
              "default": "NormalStart"
            }
          }
        },
        "exchangeMessage": {
          "description": "array of message List",
          "required": [],
          "type": "object",
          "properties": {
            "ExchangeSegment": {
              "type": "string",
              "description": "Exchange Segment",
              "default": "NSECM"
            },
            "ExchangeTimeStamp": {
              "type": "string",
              "description": "exchange time stamp in epoch",
              "default": "1150620136"
            },
            "BroadcastMessage": {
              "type": "string",
              "description": "Broadcast message",
              "default": "System -> CONNECTIVITY PLEASE CONTACT ON 022-2656 7500."
            }
          }
        }
      },
      "headers": {
        "Response-Type": {
          "description": "Response for request",
          "required": true,
          "type": "string",
          "default": "success"
        },
        "Response-Code": {
          "description": "Response code to user request",
          "required": true,
          "type": "string",
          "default": "s-user-0001"
        },
        "Response-Code-HostLookUp": {
          "description": "Response code to host lookup",
          "required": true,
          "type": "string",
          "default": "hostlookup"
        },
        "Response-Code-CancelAllOrder": {
          "description": "Response code to cancelallorders",
          "required": true,
          "type": "string",
          "default": "s-cancelAll-0001"
        },
        
        "Response-Code-GetPosition": {
          "description": "Response code to GetPosition",
          "required": true,
          "type": "string",
          "default": "s-portfolio-0009"
        },
        "Response-Description": {
          "description": "Valid/Invalid User",
          "required": true,
          "type": "string"
        },
        "Response-Result": {
          "description": "Result of valid login",
          "required": true,
          "type": "String"
        }
      },
      "requestBodies": {},
      "securitySchemes": 
    }
  }